// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // CHIP RAM8 {
    //   IN in[16], load, address[3];
    //   OUT out[16];
    // }

    // We can think about the address input of every one of these chips as a binary value that consists of two logical fields.
    // One field can be used to select the exact RAM, RAM part on which you want to operate
    // and the second field can select the very register within this RAM part that you want to affect by either reading or, or writing something into this register.
    // So taken together, this these two tricks can enable you to build RAM devices of arbitrary length.
    // And you use mux and demux gates in order to effect this hierarchical addressing scheme that I just described.

    DMux8Way(in=load, sel=address[3..5], a=loada, b=loadb, c=loadc, d=loadd, e=loade, f=loadf, g=loadg, h=loadh);

    RAM8(in=in, load=loada, address=address[0..2], out=r1);
    RAM8(in=in, load=loadb, address=address[0..2], out=r2);
    RAM8(in=in, load=loadc, address=address[0..2], out=r3);
    RAM8(in=in, load=loadd, address=address[0..2], out=r4);
    RAM8(in=in, load=loade, address=address[0..2], out=r5);
    RAM8(in=in, load=loadf, address=address[0..2], out=r6);
    RAM8(in=in, load=loadg, address=address[0..2], out=r7);
    RAM8(in=in, load=loadh, address=address[0..2], out=r8);

    Mux8Way16(a=r1, b=r2, c=r3, d=r4, e=r5, f=r6, g=r7, h=r8, sel=address[3..5], out=out);
}
